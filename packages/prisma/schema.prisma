generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-utils"
  relationModel = "default"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../kysely"
  fileName = "types.ts"
}

generator enums {
  provider = "ts-node --transpile-only enum-generator.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Host {
  userId           Int
  eventTypeId      Int
  isFixed          Boolean   @default(false)
  priority         Int?
  weight           Int?
  weightAdjustment Int?
  scheduleId       Int?
  createdAt        DateTime  @default(now())
  eventType        EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  schedule         Schedule? @relation(fields: [scheduleId], references: [id])
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventTypeId])
  @@index([userId])
  @@index([eventTypeId])
  @@index([scheduleId])
}

model CalVideoSettings {
  eventTypeId                          Int       @id
  disableRecordingForOrganizer         Boolean   @default(false)
  disableRecordingForGuests            Boolean   @default(false)
  redirectUrlOnExit                    String?
  createdAt                            DateTime  @default(now())
  updatedAt                            DateTime  @updatedAt
  enableAutomaticTranscription         Boolean   @default(false)
  disableTranscriptionForGuests        Boolean   @default(false)
  disableTranscriptionForOrganizer     Boolean   @default(false)
  enableAutomaticRecordingForOrganizer Boolean   @default(false)
  eventType                            EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
}

model EventType {
  id                                       Int                       @id @default(autoincrement())
  /// @zod.min(1)
  title                                    String
  /// @zod.custom(imports.eventTypeSlug)
  slug                                     String
  description                              String?
  /// @zod.custom(imports.eventTypeLocations)
  locations                                Json?
  /// @zod.min(1)
  length                                   Int
  hidden                                   Boolean                   @default(false)
  userId                                   Int?
  eventName                                String?
  timeZone                                 String?
  periodCountCalendarDays                  Boolean?
  periodDays                               Int?
  /// @zod.custom(imports.coerceToDate)
  periodEndDate                            DateTime?
  /// @zod.custom(imports.coerceToDate)
  periodStartDate                          DateTime?
  requiresConfirmation                     Boolean                   @default(false)
  /// @zod.min(0)
  minimumBookingNotice                     Int                       @default(120)
  currency                                 String                    @default("usd")
  price                                    Int                       @default(0)
  schedulingType                           SchedulingType?
  teamId                                   Int?
  disableGuests                            Boolean                   @default(false)
  position                                 Int                       @default(0)
  periodType                               PeriodType                @default(UNLIMITED)
  slotInterval                             Int?
  /// @zod.custom(imports.EventTypeMetaDataSchema)
  metadata                                 Json?
  afterEventBuffer                         Int                       @default(0)
  beforeEventBuffer                        Int                       @default(0)
  hideCalendarNotes                        Boolean                   @default(false)
  /// @zod.custom(imports.successRedirectUrl)
  successRedirectUrl                       String?
  seatsPerTimeSlot                         Int?
  /// @zod.custom(imports.recurringEventType)
  recurringEvent                           Json?
  scheduleId                               Int?
  /// @zod.custom(imports.intervalLimitsType)
  bookingLimits                            Json?
  seatsShowAttendees                       Boolean?                  @default(false)
  /// @zod.custom(imports.eventTypeBookingFields)
  bookingFields                            Json?
  /// @zod.custom(imports.intervalLimitsType)
  durationLimits                           Json?
  parentId                                 Int?
  offsetStart                              Int                       @default(0)
  requiresBookerEmailVerification          Boolean                   @default(false)
  seatsShowAvailabilityCount               Boolean?                  @default(true)
  lockTimeZoneToggleOnBookingPage          Boolean                   @default(false)
  onlyShowFirstAvailableSlot               Boolean                   @default(false)
  isInstantEvent                           Boolean                   @default(false)
  assignAllTeamMembers                     Boolean                   @default(false)
  profileId                                Int?
  useEventTypeDestinationCalendarEmail     Boolean                   @default(false)
  secondaryEmailId                         Int?
  forwardParamsSuccessRedirect             Boolean?                  @default(true)
  instantMeetingExpiryTimeOffsetInSeconds  Int                       @default(90)
  isRRWeightsEnabled                       Boolean                   @default(false)
  rescheduleWithSameRoundRobinHost         Boolean                   @default(false)
  /// @zod.custom(imports.eventTypeColor)
  eventTypeColor                           Json?
  requiresConfirmationWillBlockSlot        Boolean                   @default(false)
  instantMeetingScheduleId                 Int?
  hideCalendarEventDetails                 Boolean                   @default(false)
  assignRRMembersUsingSegment              Boolean                   @default(false)
  /// @zod.custom(imports.rrSegmentQueryValueSchema)
  rrSegmentQueryValue                      Json?
  maxLeadThreshold                         Int?
  instantMeetingParameters                 String[]
  autoTranslateDescriptionEnabled          Boolean                   @default(false)
  requiresConfirmationForFreeEmail         Boolean                   @default(false)
  useEventLevelSelectedCalendars           Boolean                   @default(false)
  allowReschedulingPastBookings            Boolean                   @default(false)
  interfaceLanguage                        String?
  canSendCalVideoTranscriptionEmails       Boolean                   @default(true)
  disableCancelling                        Boolean?                  @default(false)
  disableRescheduling                      Boolean?                  @default(false)
  /// @zod.custom(imports.emailSchema)
  customReplyToEmail                       String?
  hideOrganizerEmail                       Boolean                   @default(false)
  includeNoShowInRRCalculation             Boolean                   @default(false)
  restrictionScheduleId                    Int?
  useBookerTimezone                        Boolean                   @default(false)
  allowReschedulingCancelledBookings       Boolean?                  @default(false)
  maxActiveBookingsPerBooker               Int?
  maxActiveBookingPerBookerOfferReschedule Boolean                   @default(false)
  aiPhoneCallConfig                        AIPhoneCallConfiguration?
  availability                             Availability[]
  bookings                                 Booking[]
  calVideoSettings                         CalVideoSettings?
  destinationCalendar                      DestinationCalendar?
  instantMeetingSchedule                   Schedule?                 @relation("InstantMeetingSchedule", fields: [instantMeetingScheduleId], references: [id])
  parent                                   EventType?                @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)
  children                                 EventType[]               @relation("managed_eventtype")
  profile                                  Profile?                  @relation(fields: [profileId], references: [id])
  restrictionSchedule                      Schedule?                 @relation("restrictionSchedule", fields: [restrictionScheduleId], references: [id])
  schedule                                 Schedule?                 @relation(fields: [scheduleId], references: [id])
  secondaryEmail                           SecondaryEmail?           @relation(fields: [secondaryEmailId], references: [id], onDelete: Cascade)
  team                                     Team?                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  owner                                    User?                     @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  customInputs                             EventTypeCustomInput[]
  fieldTranslations                        EventTypeTranslation[]
  hashedLink                               HashedLink[]
  hosts                                    Host[]
  selectedCalendars                        SelectedCalendar[]
  webhooks                                 Webhook[]
  workflows                                WorkflowsOnEventTypes[]
  users                                    User[]                    @relation("user_eventtype")

  @@unique([userId, slug])
  @@unique([teamId, slug])
  @@unique([userId, parentId])
  @@index([userId])
  @@index([teamId])
  @@index([profileId])
  @@index([scheduleId])
  @@index([secondaryEmailId])
  @@index([parentId])
  @@index([restrictionScheduleId])
  @@index([slug], map: "idx_event_type_slug")
  @@index([teamId], map: "idx_event_type_team_id")
  @@index([userId], map: "idx_event_type_user_id")
  @@index([userId, slug], map: "idx_event_type_user_id_slug")
}

model Credential {
  id                     Int                   @id @default(autoincrement())
  type                   String
  key                    Json
  userId                 Int?
  appId                  String?
  invalid                Boolean?              @default(false)
  teamId                 Int?
  billingCycleStart      Int?
  paymentStatus          String?
  subscriptionId         String?
  delegationCredentialId String?
  references             BookingReference[]
  CalendarCache          CalendarCache[]
  app                    App?                  @relation(fields: [appId], references: [slug], onDelete: Cascade)
  delegationCredential   DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)
  team                   Team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                   User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinationCalendars   DestinationCalendar[]
  selectedCalendars      SelectedCalendar[]

  @@index([appId])
  @@index([subscriptionId])
  @@index([invalid])
  @@index([userId, delegationCredentialId])
  @@index([appId], map: "idx_credential_app_id")
  @@index([type], map: "idx_credential_type")
  @@index([userId], map: "idx_credential_user_id")
}

model DestinationCalendar {
  id                               Int                   @id @default(autoincrement())
  integration                      String
  externalId                       String
  userId                           Int?                  @unique
  eventTypeId                      Int?                  @unique
  credentialId                     Int?
  /// @zod.custom(imports.emailSchema)
  primaryEmail                     String?
  domainWideDelegationCredentialId String?
  delegationCredentialId           String?
  createdAt                        DateTime?             @default(now())
  updatedAt                        DateTime?             @updatedAt
  booking                          Booking[]
  credential                       Credential?           @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  delegationCredential             DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)
  domainWideDelegation             DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id], onDelete: Cascade)
  eventType                        EventType?            @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user                             User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([credentialId])
}

model UserPassword {
  hash   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelSchedule {
  id           Int       @id @default(autoincrement())
  userId       Int
  timeZone     String
  startDate    DateTime
  endDate      DateTime?
  prevTimeZone String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([startDate])
  @@index([endDate])
}

model User {
  id                             Int                           @id @default(autoincrement())
  username                       String?
  name                           String?
  /// @zod.custom(imports.emailSchema)
  email                          String                        @unique
  bio                            String?
  timeZone                       String                        @default("Europe/London")
  weekStart                      String                        @default("Sunday")
  startTime                      Int                           @default(0)
  endTime                        Int                           @default(1440)
  createdDate                    DateTime                      @default(now()) @map("created")
  bufferTime                     Int                           @default(0)
  emailVerified                  DateTime?
  hideBranding                   Boolean                       @default(false)
  theme                          String?
  completedOnboarding            Boolean                       @default(false)
  twoFactorEnabled               Boolean                       @default(false)
  twoFactorSecret                String?
  locale                         String?
  brandColor                     String?
  identityProvider               IdentityProvider              @default(CAL)
  identityProviderId             String?
  invitedTo                      Int?
  /// @zod.custom(imports.userMetadata)
  metadata                       Json?
  verified                       Boolean?                      @default(false)
  timeFormat                     Int?                          @default(12)
  darkBrandColor                 String?
  trialEndsAt                    DateTime?
  defaultScheduleId              Int?
  allowDynamicBooking            Boolean?                      @default(true)
  role                           UserPermissionRole            @default(USER)
  disableImpersonation           Boolean                       @default(false)
  organizationId                 Int?
  allowSEOIndexing               Boolean?                      @default(true)
  backupCodes                    String?
  receiveMonthlyDigestEmail      Boolean?                      @default(true)
  avatarUrl                      String?
  locked                         Boolean                       @default(false)
  appTheme                       String?
  movedToProfileId               Int?                          @unique
  isPlatformManaged              Boolean                       @default(false)
  smsLockState                   SMSLockState                  @default(UNLOCKED)
  smsLockReviewedByAdmin         Boolean                       @default(false)
  referralLinkId                 String?
  lastActiveAt                   DateTime?
  creationSource                 CreationSource?
  whitelistWorkflows             Boolean                       @default(false)
  accessCodes                    AccessCode[]
  AccessToken                    AccessToken[]
  accounts                       Account[]
  apiKeys                        ApiKey[]
  updatedRoutingForms            App_RoutingForms_Form[]       @relation("updated-routing-form")
  routingForms                   App_RoutingForms_Form[]       @relation("routing-form")
  createdAttributeToUsers        AttributeToUser[]             @relation("createdBy")
  updatedAttributeToUsers        AttributeToUser[]             @relation("updatedBy")
  availability                   Availability[]
  reassignedBookings             Booking[]                     @relation("reassignByUser")
  bookings                       Booking[]
  BookingInternalNote            BookingInternalNote[]
  credentials                    Credential[]
  creditBalance                  CreditBalance?
  destinationCalendar            DestinationCalendar?
  ownedEventTypes                EventType[]                   @relation("owner")
  createdTranslations            EventTypeTranslation[]        @relation("CreatedEventTypeTranslations")
  updatedTranslations            EventTypeTranslation[]        @relation("UpdatedEventTypeTranslations")
  Feedback                       Feedback[]
  filterSegments                 FilterSegment[]
  hosts                          Host[]
  impersonatedBy                 Impersonations[]              @relation("impersonated_by_user")
  impersonatedUsers              Impersonations[]              @relation("impersonated_user")
  teams                          Membership[]
  NotificationsSubscriptions     NotificationsSubscriptions[]
  createdOrganizationOnboardings OrganizationOnboarding[]      @relation("CreatedOrganizationOnboardings")
  bookingRedirectsTo             OutOfOfficeEntry[]            @relation("toUser")
  bookingRedirects               OutOfOfficeEntry[]
  OutOfOfficeReasons             OutOfOfficeReason[]
  PlatformAuthorizationToken     PlatformAuthorizationToken[]
  profiles                       Profile[]
  RefreshToken                   RefreshToken[]
  schedules                      Schedule[]
  secondaryEmails                SecondaryEmail[]
  selectedCalendars              SelectedCalendar[]
  sessions                       Session[]
  travelSchedules                TravelSchedule[]
  features                       UserFeatures[]
  filterSegmentPreferences       UserFilterSegmentPreference[]
  password                       UserPassword?
  verifiedEmails                 VerifiedEmail[]
  verifiedNumbers                VerifiedNumber[]
  createdWatchlists              Watchlist[]                   @relation("CreatedWatchlists")
  updatedWatchlists              Watchlist[]                   @relation("UpdatedWatchlists")
  webhooks                       Webhook[]
  workflows                      Workflow[]
  movedToProfile                 Profile?                      @relation("moved_to_profile", fields: [movedToProfileId], references: [id])
  organization                   Team?                         @relation("scope", fields: [organizationId], references: [id])
  platformOAuthClients           PlatformOAuthClient[]         @relation("PlatformOAuthClientToUser")
  eventTypes                     EventType[]                   @relation("user_eventtype")

  @@unique([email, username])
  @@unique([username, organizationId])
  @@index([username])
  @@index([emailVerified])
  @@index([identityProvider])
  @@index([identityProviderId])
  @@index([email], map: "idx_users_email")
  @@index([organizationId], map: "idx_users_organization_id")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model NotificationsSubscriptions {
  id           Int    @id @default(autoincrement())
  userId       Int
  subscription String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, subscription])
}

model Profile {
  id             Int         @id @default(autoincrement())
  uid            String
  userId         Int
  organizationId Int
  username       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  eventTypes     EventType[]
  organization   Team        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  movedFromUser  User?       @relation("moved_to_profile")

  @@unique([userId, organizationId])
  @@unique([username, organizationId])
  @@index([uid])
  @@index([userId])
  @@index([organizationId])
}

model Team {
  id                           Int                     @id @default(autoincrement())
  /// @zod.min(1)
  name                         String
  /// @zod.min(1)
  slug                         String?
  bio                          String?
  hideBranding                 Boolean                 @default(false)
  createdAt                    DateTime                @default(now())
  /// @zod.custom(imports.teamMetadataSchema)
  metadata                     Json?
  hideBookATeamMember          Boolean                 @default(false)
  brandColor                   String?
  darkBrandColor               String?
  theme                        String?
  appLogo                      String?
  appIconLogo                  String?
  parentId                     Int?
  timeFormat                   Int?
  timeZone                     String                  @default("Europe/London")
  weekStart                    String                  @default("Sunday")
  isPrivate                    Boolean                 @default(false)
  logoUrl                      String?
  calVideoLogo                 String?
  pendingPayment               Boolean                 @default(false)
  isOrganization               Boolean                 @default(false)
  bannerUrl                    String?
  isPlatform                   Boolean                 @default(false)
  smsLockState                 SMSLockState            @default(UNLOCKED)
  createdByOAuthClientId       String?
  smsLockReviewedByAdmin       Boolean                 @default(false)
  /// @zod.custom(imports.intervalLimitsType)
  bookingLimits                Json?
  includeManagedEventsInLimits Boolean                 @default(false)
  rrResetInterval              RRResetInterval?        @default(MONTH)
  hideTeamProfileLink          Boolean                 @default(false)
  rrTimestampBasis             RRTimestampBasis        @default(CREATED_AT)
  accessCodes                  AccessCode[]
  apiKeys                      ApiKey[]
  routingForms                 App_RoutingForms_Form[]
  attributes                   Attribute[]
  credentials                  Credential[]
  creditBalance                CreditBalance?
  dsyncTeamGroupMapping        DSyncTeamGroupMapping[]
  delegationCredentials        DelegationCredential[]
  domainWideDelegations        DomainWideDelegation[]
  eventTypes                   EventType[]
  filterSegments               FilterSegment[]
  instantMeetingTokens         InstantMeetingToken[]
  internalNotePresets          InternalNotePreset[]
  managedOrganization          ManagedOrganization?    @relation("ManagedOrganization")
  managedOrganizations         ManagedOrganization[]   @relation("ManagerOrganization")
  members                      Membership[]
  organizationOnboarding       OrganizationOnboarding?
  organizationSettings         OrganizationSettings?
  platformBilling              PlatformBilling?
  platformOAuthClient          PlatformOAuthClient[]
  orgProfiles                  Profile[]
  roles                        Role[]
  createdByOAuthClient         PlatformOAuthClient?    @relation("CreatedByOAuthClient", fields: [createdByOAuthClientId], references: [id], onDelete: Cascade)
  parent                       Team?                   @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)
  children                     Team[]                  @relation("organization")
  features                     TeamFeatures[]
  inviteTokens                 VerificationToken[]
  verifiedEmails               VerifiedEmail[]
  verifiedNumbers              VerifiedNumber[]
  webhooks                     Webhook[]
  workflows                    Workflow[]
  activeOrgWorkflows           WorkflowsOnTeams[]
  orgUsers                     User[]                  @relation("scope")

  @@unique([slug, parentId])
  @@index([parentId])
}

model CreditBalance {
  id                String              @id @default(uuid())
  teamId            Int?                @unique
  userId            Int?                @unique
  additionalCredits Int                 @default(0)
  limitReachedAt    DateTime?
  warningSentAt     DateTime?
  team              Team?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenseLogs       CreditExpenseLog[]
  purchaseLogs      CreditPurchaseLog[]
}

model CreditPurchaseLog {
  id              String        @id @default(uuid())
  creditBalanceId String
  credits         Int
  createdAt       DateTime      @default(now())
  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id], onDelete: Cascade)
}

model CreditExpenseLog {
  id              String        @id @default(uuid())
  creditBalanceId String
  bookingUid      String?
  credits         Int?
  creditType      CreditType
  date            DateTime
  smsSid          String?
  smsSegments     Int?
  booking         Booking?      @relation(fields: [bookingUid], references: [uid], onDelete: Cascade)
  creditBalance   CreditBalance @relation(fields: [creditBalanceId], references: [id], onDelete: Cascade)
}

model OrganizationSettings {
  id                                  Int        @id @default(autoincrement())
  organizationId                      Int        @unique
  isOrganizationConfigured            Boolean    @default(false)
  isOrganizationVerified              Boolean    @default(false)
  orgAutoAcceptEmail                  String
  lockEventTypeCreationForUsers       Boolean    @default(false)
  isAdminReviewed                     Boolean    @default(false)
  adminGetsNoSlotsNotification        Boolean    @default(false)
  isAdminAPIEnabled                   Boolean    @default(false)
  allowSEOIndexing                    Boolean    @default(false)
  orgProfileRedirectsToVerifiedDomain Boolean    @default(false)
  disablePhoneOnlySMSNotifications    Boolean    @default(false)
  dSyncData                           DSyncData?
  organization                        Team       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Membership {
  teamId               Int
  userId               Int
  accepted             Boolean           @default(false)
  role                 MembershipRole
  disableImpersonation Boolean           @default(false)
  id                   Int               @id @default(autoincrement())
  createdAt            DateTime?         @default(now())
  updatedAt            DateTime?         @updatedAt
  customRoleId         String?
  AttributeToUser      AttributeToUser[]
  customRole           Role?             @relation(fields: [customRoleId], references: [id])
  team                 Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
  @@index([accepted])
  @@index([role])
  @@index([customRoleId])
}

model VerificationToken {
  id               Int             @id @default(autoincrement())
  identifier       String
  token            String          @unique
  expires          DateTime
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  expiresInDays    Int?
  teamId           Int?
  secondaryEmailId Int?
  secondaryEmail   SecondaryEmail? @relation(fields: [secondaryEmailId], references: [id])
  team             Team?           @relation(fields: [teamId], references: [id])

  @@unique([identifier, token])
  @@index([token])
  @@index([teamId])
  @@index([secondaryEmailId])
}

model InstantMeetingToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  teamId    Int
  bookingId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id])

  @@index([token])
}

model BookingReference {
  id                               Int                   @id @default(autoincrement())
  /// @zod.min(1)
  type                             String
  /// @zod.min(1)
  uid                              String
  bookingId                        Int?
  meetingId                        String?
  meetingPassword                  String?
  meetingUrl                       String?
  deleted                          Boolean?
  externalCalendarId               String?
  credentialId                     Int?
  thirdPartyRecurringEventId       String?
  domainWideDelegationCredentialId String?
  delegationCredentialId           String?
  booking                          Booking?              @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  credential                       Credential?           @relation(fields: [credentialId], references: [id])
  delegationCredential             DelegationCredential? @relation(fields: [delegationCredentialId], references: [id])
  domainWideDelegation             DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id])

  @@index([bookingId])
  @@index([type])
  @@index([uid])
}

model Attendee {
  id          Int          @id @default(autoincrement())
  email       String
  name        String
  timeZone    String
  bookingId   Int?
  locale      String?      @default("en")
  phoneNumber String?
  noShow      Boolean?     @default(false)
  booking     Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingSeat BookingSeat?

  @@index([email])
  @@index([bookingId])
}

model Booking {
  id                           Int                               @id @default(autoincrement())
  uid                          String                            @unique
  userId                       Int?
  eventTypeId                  Int?
  title                        String
  description                  String?
  startTime                    DateTime
  endTime                      DateTime
  createdAt                    DateTime                          @default(now())
  updatedAt                    DateTime?                         @updatedAt
  location                     String?
  paid                         Boolean                           @default(false)
  status                       BookingStatus                     @default(ACCEPTED)
  cancellationReason           String?
  rejectionReason              String?
  fromReschedule               String?
  rescheduled                  Boolean?
  dynamicEventSlugRef          String?
  dynamicGroupSlugRef          String?
  recurringEventId             String?
  customInputs                 Json?
  smsReminderNumber            String?
  destinationCalendarId        Int?
  scheduledJobs                String[]
  /// @zod.custom(imports.bookingMetadataSchema)
  metadata                     Json?
  /// @zod.custom(imports.bookingResponses)
  responses                    Json?
  isRecorded                   Boolean                           @default(false)
  iCalSequence                 Int                               @default(0)
  iCalUID                      String?                           @default("")
  /// @zod.custom(imports.emailSchema)
  userPrimaryEmail             String?
  idempotencyKey               String?                           @unique
  noShowHost                   Boolean?                          @default(false)
  rating                       Int?
  ratingFeedback               String?
  /// @zod.email()
  cancelledBy                  String?
  /// @zod.email()
  rescheduledBy                String?
  oneTimePassword              String?                           @unique @default(uuid())
  reassignReason               String?
  reassignById                 Int?
  creationSource               CreationSource?
  routedFromRoutingFormReponse App_RoutingForms_FormResponse?
  assignmentReason             AssignmentReason[]
  attendees                    Attendee[]
  destinationCalendar          DestinationCalendar?              @relation(fields: [destinationCalendarId], references: [id])
  eventType                    EventType?                        @relation(fields: [eventTypeId], references: [id])
  reassignBy                   User?                             @relation("reassignByUser", fields: [reassignById], references: [id])
  user                         User?                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  internalNote                 BookingInternalNote[]
  references                   BookingReference[]
  seatsReferences              BookingSeat[]
  expenseLogs                  CreditExpenseLog[]
  instantMeetingToken          InstantMeetingToken?
  payment                      Payment[]
  routingFormResponses         RoutingFormResponseDenormalized[]
  tracking                     Tracking?
  scheduledTriggers            WebhookScheduledTriggers[]
  workflowReminders            WorkflowReminder[]

  @@index([eventTypeId])
  @@index([userId])
  @@index([destinationCalendarId])
  @@index([recurringEventId])
  @@index([uid])
  @@index([status])
  @@index([startTime, endTime, status])
  @@index([eventTypeId], map: "idx_booking_event_type_id")
  @@index([startTime], map: "idx_booking_start_time")
  @@index([status], map: "idx_booking_status")
  @@index([status, startTime], map: "idx_booking_status_start_time")
  @@index([uid], map: "idx_booking_uid")
  @@index([userId], map: "idx_booking_user_id")
}

model Tracking {
  id           Int     @id @default(autoincrement())
  bookingId    Int     @unique
  utm_source   String?
  utm_medium   String?
  utm_campaign String?
  utm_term     String?
  utm_content  String?
  booking      Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Schedule {
  id                   Int            @id @default(autoincrement())
  userId               Int
  name                 String
  timeZone             String?
  availability         Availability[]
  instantMeetingEvents EventType[]    @relation("InstantMeetingSchedule")
  restrictionSchedule  EventType[]    @relation("restrictionSchedule")
  eventType            EventType[]
  Host                 Host[]
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Availability {
  id          Int        @id @default(autoincrement())
  userId      Int?
  eventTypeId Int?
  days        Int[]
  date        DateTime?  @db.Date
  startTime   DateTime   @db.Time(6)
  endTime     DateTime   @db.Time(6)
  scheduleId  Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([scheduleId])
}

model SelectedCalendar {
  userId                           Int
  integration                      String
  externalId                       String
  credentialId                     Int?
  googleChannelExpiration          String?
  googleChannelId                  String?
  googleChannelKind                String?
  googleChannelResourceId          String?
  googleChannelResourceUri         String?
  domainWideDelegationCredentialId String?
  id                               String                @id @default(uuid())
  eventTypeId                      Int?
  error                            String?
  delegationCredentialId           String?
  lastErrorAt                      DateTime?
  maxAttempts                      Int                   @default(3)
  unwatchAttempts                  Int                   @default(0)
  watchAttempts                    Int                   @default(0)
  createdAt                        DateTime?             @default(now())
  updatedAt                        DateTime?             @updatedAt
  credential                       Credential?           @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  delegationCredential             DelegationCredential? @relation(fields: [delegationCredentialId], references: [id], onDelete: Cascade)
  domainWideDelegationCredential   DomainWideDelegation? @relation(fields: [domainWideDelegationCredentialId], references: [id], onDelete: Cascade)
  eventType                        EventType?            @relation(fields: [eventTypeId], references: [id])
  user                             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, integration, externalId, eventTypeId])
  @@unique([googleChannelId, eventTypeId])
  @@index([userId])
  @@index([externalId])
  @@index([eventTypeId])
  @@index([credentialId])
  @@index([integration, googleChannelExpiration, error, watchAttempts, maxAttempts], map: "SelectedCalendar_watch_idx")
  @@index([integration, googleChannelExpiration, error, unwatchAttempts, maxAttempts], map: "SelectedCalendar_unwatch_idx")
}

model EventTypeCustomInput {
  id          Int                      @id @default(autoincrement())
  eventTypeId Int
  label       String
  required    Boolean
  type        EventTypeCustomInputType
  placeholder String                   @default("")
  /// @zod.custom(imports.customInputOptionSchema)
  options     Json?
  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@index([eventTypeId])
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime
}

model ReminderMail {
  id             Int          @id @default(autoincrement())
  referenceId    Int
  reminderType   ReminderType
  elapsedMinutes Int
  createdAt      DateTime     @default(now())

  @@index([referenceId])
  @@index([reminderType])
}

model Payment {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  bookingId     Int
  amount        Int
  fee           Int
  currency      String
  success       Boolean
  refunded      Boolean
  data          Json
  externalId    String         @unique
  appId         String?
  paymentOption PaymentOption? @default(ON_BOOKING)
  app           App?           @relation(fields: [appId], references: [slug], onDelete: Cascade)
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([externalId])
}

model Webhook {
  id                    String                     @id
  userId                Int?
  /// @zod.url()
  subscriberUrl         String
  createdAt             DateTime                   @default(now())
  active                Boolean                    @default(true)
  eventTriggers         WebhookTriggerEvents[]
  payloadTemplate       String?
  eventTypeId           Int?
  appId                 String?
  secret                String?
  teamId                Int?
  platform              Boolean                    @default(false)
  platformOAuthClientId String?
  time                  Int?
  timeUnit              TimeUnit?
  app                   App?                       @relation(fields: [appId], references: [slug], onDelete: Cascade)
  eventType             EventType?                 @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  platformOAuthClient   PlatformOAuthClient?       @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  team                  Team?                      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                  User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduledTriggers     WebhookScheduledTriggers[]

  @@unique([userId, subscriberUrl], name: "courseIdentifier")
  @@unique([platformOAuthClientId, subscriberUrl], name: "oauthclientwebhook")
  @@index([active])
}

model Impersonations {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  impersonatedUserId Int
  impersonatedById   Int
  impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)
  impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)

  @@index([impersonatedUserId])
  @@index([impersonatedById])
}

model ApiKey {
  id         String      @id @default(cuid())
  userId     Int
  note       String?
  createdAt  DateTime    @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String      @unique
  appId      String?
  teamId     Int?
  app        App?        @relation(fields: [appId], references: [slug], onDelete: Cascade)
  team       Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rateLimits RateLimit[]

  @@index([userId])
}

model RateLimit {
  id            String   @id @default(uuid())
  name          String
  apiKeyId      String
  ttl           Int
  limit         Int
  blockDuration Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  apiKey        ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId])
}

model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerEmail     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model App {
  slug        String          @id
  dirName     String          @unique
  keys        Json?
  categories  AppCategories[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  enabled     Boolean         @default(false)
  ApiKey      ApiKey[]
  credentials Credential[]
  payments    Payment[]
  Webhook     Webhook[]

  @@index([enabled])
}

model App_RoutingForms_Form {
  id                       String                                      @id @default(cuid())
  description              String?
  routes                   Json?
  createdAt                DateTime                                    @default(now())
  updatedAt                DateTime                                    @updatedAt
  name                     String
  fields                   Json?
  userId                   Int
  disabled                 Boolean                                     @default(false)
  /// @zod.custom(imports.RoutingFormSettings)
  settings                 Json?
  teamId                   Int?
  position                 Int                                         @default(0)
  updatedById              Int?
  team                     Team?                                       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  updatedBy                User?                                       @relation("updated-routing-form", fields: [updatedById], references: [id])
  user                     User                                        @relation("routing-form", fields: [userId], references: [id], onDelete: Cascade)
  responses                App_RoutingForms_FormResponse[]
  incompleteBookingActions App_RoutingForms_IncompleteBookingActions[]
  queuedResponses          App_RoutingForms_QueuedFormResponse[]

  @@index([userId])
  @@index([disabled])
}

model App_RoutingForms_FormResponse {
  id                        Int                                  @id @default(autoincrement())
  formFillerId              String                               @default(cuid())
  formId                    String
  response                  Json
  createdAt                 DateTime                             @default(now())
  routedToBookingUid        String?                              @unique
  chosenRouteId             String?
  updatedAt                 DateTime?                            @updatedAt
  uuid                      String?                              @default(uuid())
  form                      App_RoutingForms_Form                @relation(fields: [formId], references: [id], onDelete: Cascade)
  routedToBooking           Booking?                             @relation(fields: [routedToBookingUid], references: [uid])
  queuedFormResponse        App_RoutingForms_QueuedFormResponse?
  routingFormResponses      RoutingFormResponseDenormalized?
  routingFormResponseFields RoutingFormResponseField[]

  @@unique([formFillerId, formId])
  @@index([formFillerId])
  @@index([formId])
  @@index([routedToBookingUid])
}

model App_RoutingForms_QueuedFormResponse {
  id               String                         @id @default(cuid())
  formId           String
  response         Json
  chosenRouteId    String?
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime?                      @updatedAt
  actualResponseId Int?                           @unique
  actualResponse   App_RoutingForms_FormResponse? @relation(fields: [actualResponseId], references: [id], onDelete: Cascade)
  form             App_RoutingForms_Form          @relation(fields: [formId], references: [id], onDelete: Cascade)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model RoutingFormResponseField {
  id               Int                           @id @default(autoincrement())
  responseId       Int
  fieldId          String
  valueString      String?
  valueNumber      Decimal?
  valueStringArray String[]
  response         App_RoutingForms_FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade, map: "RoutingFormResponseField_response_fkey")

  @@index([responseId])
  @@index([fieldId])
  @@index([valueNumber])
  @@index([valueStringArray], type: Gin)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model RoutingFormResponseDenormalized {
  id                      Int                           @id
  formId                  String
  formName                String
  formTeamId              Int?
  formUserId              Int
  bookingUid              String?
  bookingId               Int?
  bookingStatus           BookingStatus?
  bookingStatusOrder      Int?
  bookingCreatedAt        DateTime?
  bookingStartTime        DateTime?
  bookingEndTime          DateTime?
  bookingUserId           Int?
  bookingUserName         String?
  bookingUserEmail        String?
  bookingUserAvatarUrl    String?
  bookingAssignmentReason String?
  eventTypeId             Int?
  eventTypeParentId       Int?
  eventTypeSchedulingType String?
  createdAt               DateTime
  utm_source              String?
  utm_medium              String?
  utm_campaign            String?
  utm_term                String?
  utm_content             String?
  uuid                    String?
  booking                 Booking?                      @relation(fields: [bookingId], references: [id])
  response                App_RoutingForms_FormResponse @relation(fields: [id], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([formTeamId])
  @@index([formUserId])
  @@index([formId, createdAt])
  @@index([bookingId])
  @@index([bookingUserId])
  @@index([eventTypeId, eventTypeParentId])
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  userId  Int
  rating  String
  comment String?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rating])
}

model WorkflowStep {
  id                        Int                @id @default(autoincrement())
  stepNumber                Int
  action                    WorkflowActions
  workflowId                Int
  sendTo                    String?
  reminderBody              String?
  emailSubject              String?
  template                  WorkflowTemplates  @default(REMINDER)
  numberRequired            Boolean?
  sender                    String?
  numberVerificationPending Boolean            @default(true)
  includeCalendarEvent      Boolean            @default(false)
  verifiedAt                DateTime?
  workflowReminders         WorkflowReminder[]
  workflow                  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
}

model Workflow {
  id            Int                     @id @default(autoincrement())
  name          String
  userId        Int?
  trigger       WorkflowTriggerEvents
  time          Int?
  timeUnit      TimeUnit?
  teamId        Int?
  position      Int                     @default(0)
  isActiveOnAll Boolean                 @default(false)
  team          Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user          User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps         WorkflowStep[]
  activeOn      WorkflowsOnEventTypes[]
  activeOnTeams WorkflowsOnTeams[]

  @@index([userId])
  @@index([teamId])
}

model AIPhoneCallConfiguration {
  id              Int       @id @default(autoincrement())
  eventTypeId     Int       @unique
  generalPrompt   String?
  yourPhoneNumber String
  numberToCall    String
  guestName       String?
  enabled         Boolean   @default(false)
  beginMessage    String?
  llmId           String?
  guestCompany    String?
  guestEmail      String?
  schedulerName   String?
  templateType    String    @default("CUSTOM_TEMPLATE")
  eventType       EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@index([eventTypeId])
}

model WorkflowsOnEventTypes {
  id          Int       @id @default(autoincrement())
  workflowId  Int
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, eventTypeId])
  @@index([workflowId])
  @@index([eventTypeId])
}

model WorkflowsOnTeams {
  id         Int      @id @default(autoincrement())
  workflowId Int
  teamId     Int
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, teamId])
  @@index([workflowId])
  @@index([teamId])
}

model Deployment {
  /// This is a single row table, so we use a fixed id
  id                      Int       @id @default(1)
  logo                    String?
  /// @zod.custom(imports.DeploymentTheme)
  theme                   Json?
  licenseKey              String?
  agreedLicenseAt         DateTime?
  signatureTokenEncrypted String?
}

model WorkflowReminder {
  id                  Int             @id @default(autoincrement())
  bookingUid          String?
  method              WorkflowMethods
  scheduledDate       DateTime
  referenceId         String?         @unique
  scheduled           Boolean
  workflowStepId      Int?
  cancelled           Boolean?
  seatReferenceId     String?
  isMandatoryReminder Boolean?        @default(false)
  retryCount          Int             @default(0)
  uuid                String?         @unique @default(uuid())
  booking             Booking?        @relation(fields: [bookingUid], references: [uid])
  workflowStep        WorkflowStep?   @relation(fields: [workflowStepId], references: [id], onDelete: Cascade)

  @@index([bookingUid])
  @@index([workflowStepId])
  @@index([seatReferenceId])
  @@index([method, scheduled, scheduledDate])
  @@index([cancelled, scheduledDate])
}

model WebhookScheduledTriggers {
  id            Int       @id @default(autoincrement())
  jobName       String?
  subscriberUrl String
  payload       String
  startAfter    DateTime
  retryCount    Int       @default(0)
  createdAt     DateTime? @default(now())
  webhookId     String?
  appId         String?
  bookingId     Int?
  booking       Booking?  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  webhook       Webhook?  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model BookingSeat {
  id           Int      @id @default(autoincrement())
  referenceUid String   @unique
  bookingId    Int
  attendeeId   Int      @unique
  /// @zod.custom(imports.bookingSeatDataSchema)
  data         Json?
  metadata     Json?
  attendee     Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([attendeeId])
}

model VerifiedNumber {
  id          Int    @id @default(autoincrement())
  userId      Int?
  phoneNumber String
  teamId      Int?
  team        Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model VerifiedEmail {
  id     Int    @id @default(autoincrement())
  userId Int?
  teamId Int?
  email  String
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model Feature {
  slug        String         @id
  enabled     Boolean        @default(false)
  description String?
  type        FeatureType?   @default(RELEASE)
  stale       Boolean?       @default(false)
  lastUsedAt  DateTime?
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @default(now()) @updatedAt
  updatedBy   Int?
  teams       TeamFeatures[]
  users       UserFeatures[]

  @@index([enabled])
  @@index([stale])
}

model UserFeatures {
  userId     Int
  featureId  String
  assignedAt DateTime @default(now())
  assignedBy String
  updatedAt  DateTime @updatedAt
  feature    Feature  @relation(fields: [featureId], references: [slug], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, featureId])
  @@index([userId, featureId])
}

model TeamFeatures {
  teamId     Int
  featureId  String
  assignedAt DateTime @default(now())
  assignedBy String
  updatedAt  DateTime @updatedAt
  feature    Feature  @relation(fields: [featureId], references: [slug], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, featureId])
  @@index([teamId, featureId])
}

model SelectedSlots {
  id               Int      @id @default(autoincrement())
  eventTypeId      Int
  userId           Int
  slotUtcStartDate DateTime
  slotUtcEndDate   DateTime
  uid              String
  releaseAt        DateTime
  isSeat           Boolean  @default(false)

  @@unique([userId, slotUtcStartDate, slotUtcEndDate, uid], name: "selectedSlotUnique")
}

model OAuthClient {
  clientId     String       @id
  redirectUri  String
  clientSecret String
  name         String
  logo         String?
  accessCodes  AccessCode[]
}

model AccessCode {
  id        Int           @id @default(autoincrement())
  code      String
  clientId  String?
  expiresAt DateTime
  scopes    AccessScope[]
  userId    Int?
  teamId    Int?
  client    OAuthClient?  @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  team      Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BookingDenormalized {
  id             Int           @id
  uid            String
  eventTypeId    Int?
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  createdAt      DateTime
  updatedAt      DateTime?
  location       String?
  paid           Boolean
  status         BookingStatus
  rescheduled    Boolean?
  userId         Int?
  teamId         Int?
  eventLength    Int?
  eventParentId  Int?
  userEmail      String?
  userName       String?
  userUsername   String?
  ratingFeedback String?
  rating         Int?
  noShowHost     Boolean?
  isTeamBooking  Boolean

  @@index([userId])
  @@index([createdAt])
  @@index([eventTypeId])
  @@index([eventParentId])
  @@index([teamId])
  @@index([startTime])
  @@index([endTime])
  @@index([status])
  @@index([teamId, isTeamBooking])
  @@index([userId, isTeamBooking])
}

model CalendarCache {
  key          String
  value        Json
  expiresAt    DateTime
  credentialId Int
  id           String?    @default(uuid())
  userId       Int?
  credential   Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@id([credentialId, key])
  @@index([userId, key])
}

model TempOrgRedirect {
  id        Int          @id @default(autoincrement())
  from      String
  fromOrgId Int
  type      RedirectType
  toUrl     String
  enabled   Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([from, type, fromOrgId])
}

model Avatar {
  teamId    Int     @default(0)
  userId    Int     @default(0)
  data      String
  objectKey String  @unique
  isBanner  Boolean @default(false)

  @@unique([teamId, userId, isBanner])
  @@map("avatars")
}

model OutOfOfficeEntry {
  id        Int                @id @default(autoincrement())
  uuid      String             @unique
  start     DateTime
  end       DateTime
  userId    Int
  toUserId  Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  reasonId  Int?
  notes     String?
  reason    OutOfOfficeReason? @relation(fields: [reasonId], references: [id])
  toUser    User?              @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([uuid])
  @@index([userId])
  @@index([toUserId])
  @@index([start, end])
}

model OutOfOfficeReason {
  id      Int                @id @default(autoincrement())
  emoji   String
  reason  String             @unique
  enabled Boolean            @default(true)
  userId  Int?
  entries OutOfOfficeEntry[]
  user    User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformOAuthClient {
  id                           String                       @id @default(cuid())
  name                         String
  secret                       String
  permissions                  Int
  logo                         String?
  redirectUris                 String[]
  organizationId               Int
  createdAt                    DateTime                     @default(now())
  areEmailsEnabled             Boolean                      @default(false)
  bookingCancelRedirectUri     String?
  bookingRedirectUri           String?
  bookingRescheduleRedirectUri String?
  areDefaultEventTypesEnabled  Boolean                      @default(true)
  areCalendarEventsEnabled     Boolean                      @default(true)
  accessTokens                 AccessToken[]
  authorizationTokens          PlatformAuthorizationToken[]
  organization                 Team                         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  refreshToken                 RefreshToken[]
  teams                        Team[]                       @relation("CreatedByOAuthClient")
  webhook                      Webhook[]
  users                        User[]                       @relation("PlatformOAuthClientToUser")
}

model PlatformAuthorizationToken {
  id                    String              @id @default(cuid())
  platformOAuthClientId String
  userId                Int
  createdAt             DateTime            @default(now())
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platformOAuthClientId])
}

model AccessToken {
  id                    Int                 @id @default(autoincrement())
  secret                String              @unique
  createdAt             DateTime            @default(now())
  expiresAt             DateTime
  platformOAuthClientId String
  userId                Int
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id                    Int                 @id @default(autoincrement())
  secret                String              @unique
  createdAt             DateTime            @default(now())
  expiresAt             DateTime
  platformOAuthClientId String
  userId                Int
  client                PlatformOAuthClient @relation(fields: [platformOAuthClientId], references: [id], onDelete: Cascade)
  owner                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DSyncData {
  id                      Int                     @id @default(autoincrement())
  directoryId             String                  @unique
  tenant                  String
  organizationId          Int?                    @unique
  createdAttributeToUsers AttributeToUser[]       @relation("createdByDSync")
  updatedAttributeToUsers AttributeToUser[]       @relation("updatedByDSync")
  org                     OrganizationSettings?   @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  teamGroupMapping        DSyncTeamGroupMapping[]
}

model DSyncTeamGroupMapping {
  id             Int       @id @default(autoincrement())
  teamId         Int
  directoryId    String
  groupName      String
  organizationId Int
  directory      DSyncData @relation(fields: [directoryId], references: [directoryId], onDelete: Cascade)
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, groupName])
}

model SecondaryEmail {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  email              String              @unique
  emailVerified      DateTime?
  eventTypes         EventType[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationTokens VerificationToken[]

  @@unique([userId, email])
  @@index([userId])
}

model Task {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  scheduledAt         DateTime  @default(now())
  succeededAt         DateTime?
  type                String
  payload             String
  attempts            Int       @default(0)
  maxAttempts         Int       @default(3)
  lastError           String?
  lastFailedAttemptAt DateTime?
  referenceUid        String?

  @@unique([referenceUid, type])
  @@index([succeededAt])
  @@index([scheduledAt, succeededAt])
}

model ManagedOrganization {
  managedOrganizationId Int      @unique
  managerOrganizationId Int
  createdAt             DateTime @default(now())
  managedOrganization   Team     @relation("ManagedOrganization", fields: [managedOrganizationId], references: [id], onDelete: Cascade)
  managerOrganization   Team     @relation("ManagerOrganization", fields: [managerOrganizationId], references: [id], onDelete: Cascade)

  @@unique([managerOrganizationId, managedOrganizationId])
  @@index([managerOrganizationId])
}

model PlatformBilling {
  id                Int               @id
  customerId        String
  plan              String            @default("none")
  subscriptionId    String?
  billingCycleStart Int?
  billingCycleEnd   Int?
  overdue           Boolean?          @default(false)
  managerBillingId  Int?
  priceId           String?
  team              Team              @relation(fields: [id], references: [id], onDelete: Cascade)
  managerBilling    PlatformBilling?  @relation("PlatformManagedBilling", fields: [managerBillingId], references: [id])
  managedBillings   PlatformBilling[] @relation("PlatformManagedBilling")
}

model AttributeOption {
  id            String            @id @default(uuid())
  attributeId   String
  value         String
  slug          String
  contains      String[]
  isGroup       Boolean           @default(false)
  attribute     Attribute         @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  assignedUsers AttributeToUser[]
}

model Attribute {
  id                   String            @id @default(uuid())
  teamId               Int
  type                 AttributeType
  name                 String
  slug                 String
  enabled              Boolean           @default(true)
  usersCanEditRelation Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  isWeightsEnabled     Boolean           @default(false)
  isLocked             Boolean           @default(false)
  team                 Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  options              AttributeOption[]

  @@unique([teamId, slug])
  @@index([teamId])
}

model AttributeToUser {
  id                String          @id @default(uuid())
  memberId          Int
  attributeOptionId String
  weight            Int?
  createdAt         DateTime        @default(now())
  createdByDSyncId  String?
  createdById       Int?
  updatedAt         DateTime?       @updatedAt
  updatedByDSyncId  String?
  updatedById       Int?
  attributeOption   AttributeOption @relation(fields: [attributeOptionId], references: [id], onDelete: Cascade)
  createdByDSync    DSyncData?      @relation("createdByDSync", fields: [createdByDSyncId], references: [directoryId])
  createdBy         User?           @relation("createdBy", fields: [createdById], references: [id])
  member            Membership      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  updatedByDSync    DSyncData?      @relation("updatedByDSync", fields: [updatedByDSyncId], references: [directoryId])
  updatedBy         User?           @relation("updatedBy", fields: [updatedById], references: [id])

  @@unique([memberId, attributeOptionId])
}

model AssignmentReason {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  bookingId    Int
  reasonEnum   AssignmentReasonEnum
  reasonString String
  booking      Booking              @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model DelegationCredential {
  id                  String                @id @default(uuid())
  workspacePlatformId Int
  /// @zod.custom(imports.serviceAccountKeySchema)
  serviceAccountKey   Json
  enabled             Boolean               @default(false)
  organizationId      Int
  domain              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastDisabledAt      DateTime?
  lastEnabledAt       DateTime?
  bookingReferences   BookingReference[]
  credentials         Credential[]
  organization        Team                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workspacePlatform   WorkspacePlatform     @relation(fields: [workspacePlatformId], references: [id], onDelete: Cascade)
  destinationCalendar DestinationCalendar[]
  selectedCalendars   SelectedCalendar[]

  @@unique([organizationId, domain])
  @@index([enabled])
}

model DomainWideDelegation {
  id                  String                @id @default(uuid())
  workspacePlatformId Int
  /// @zod.custom(imports.serviceAccountKeySchema)
  serviceAccountKey   Json
  enabled             Boolean               @default(false)
  organizationId      Int
  domain              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  bookingReferences   BookingReference[]
  destinationCalendar DestinationCalendar[]
  organization        Team                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workspacePlatform   WorkspacePlatform     @relation(fields: [workspacePlatformId], references: [id], onDelete: Cascade)
  selectedCalendars   SelectedCalendar[]

  @@unique([organizationId, domain])
}

model WorkspacePlatform {
  id                       Int                    @id @default(autoincrement())
  /// @zod.min(1)
  slug                     String                 @unique
  /// @zod.min(1)
  name                     String
  description              String
  /// @zod.custom(imports.serviceAccountKeySchema)
  defaultServiceAccountKey Json
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  enabled                  Boolean                @default(false)
  delegationCredentials    DelegationCredential[]
  domainWideDelegations    DomainWideDelegation[]
}

model EventTypeTranslation {
  eventTypeId    Int
  field          EventTypeAutoTranslatedField
  translatedText String
  createdAt      DateTime                     @default(now())
  createdBy      Int
  updatedAt      DateTime                     @updatedAt
  updatedBy      Int?
  sourceLocale   String
  targetLocale   String
  uid            String                       @id @default(cuid())
  creator        User                         @relation("CreatedEventTypeTranslations", fields: [createdBy], references: [id])
  eventType      EventType                    @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  updater        User?                        @relation("UpdatedEventTypeTranslations", fields: [updatedBy], references: [id])

  @@unique([eventTypeId, field, targetLocale])
  @@index([eventTypeId, field, targetLocale])
}

model Watchlist {
  id          String            @id @default(cuid())
  type        WatchlistType
  value       String
  description String?
  createdAt   DateTime          @default(now())
  createdById Int
  updatedAt   DateTime          @updatedAt
  updatedById Int?
  severity    WatchlistSeverity @default(LOW)
  createdBy   User              @relation("CreatedWatchlists", fields: [createdById], references: [id], onDelete: Cascade)
  updatedBy   User?             @relation("UpdatedWatchlists", fields: [updatedById], references: [id])

  @@unique([type, value])
  @@index([type, value])
}

model OrganizationOnboarding {
  id                       String        @id @default(uuid())
  createdById              Int
  createdAt                DateTime      @default(now())
  orgOwnerEmail            String        @unique
  error                    String?
  updatedAt                DateTime      @updatedAt
  organizationId           Int?          @unique
  billingPeriod            BillingPeriod
  pricePerSeat             Float
  seats                    Int
  isPlatform               Boolean       @default(false)
  name                     String
  slug                     String
  logo                     String?
  bio                      String?
  isDomainConfigured       Boolean       @default(false)
  stripeCustomerId         String?       @unique
  stripeSubscriptionId     String?
  stripeSubscriptionItemId String?
  /// @zod.custom(imports.orgOnboardingInvitedMembersSchema)
  invitedMembers           Json          @default("[]")
  /// @zod.custom(imports.orgOnboardingTeamsSchema)
  teams                    Json          @default("[]")
  isComplete               Boolean       @default(false)
  createdBy                User          @relation("CreatedOrganizationOnboardings", fields: [createdById], references: [id], onDelete: Cascade)
  organization             Team?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([orgOwnerEmail])
  @@index([stripeCustomerId])
}

model App_RoutingForms_IncompleteBookingActions {
  id           Int                         @id @default(autoincrement())
  formId       String
  actionType   IncompleteBookingActionType
  data         Json
  enabled      Boolean                     @default(true)
  credentialId Int?
  form         App_RoutingForms_Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model InternalNotePreset {
  id                  Int                   @id @default(autoincrement())
  name                String
  cancellationReason  String?
  teamId              Int
  createdAt           DateTime              @default(now())
  BookingInternalNote BookingInternalNote[]
  team                Team                  @relation(fields: [teamId], references: [id])

  @@unique([teamId, name])
  @@index([teamId])
}

model FilterSegment {
  id               Int                           @id @default(autoincrement())
  name             String
  tableIdentifier  String
  scope            FilterSegmentScope
  activeFilters    Json?
  sorting          Json?
  columnVisibility Json?
  columnSizing     Json?
  perPage          Int
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  userId           Int
  teamId           Int?
  searchTerm       String?
  team             Team?                         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPreferences  UserFilterSegmentPreference[]

  @@index([scope, userId, tableIdentifier])
  @@index([scope, teamId, tableIdentifier])
}

model UserFilterSegmentPreference {
  id              Int           @id @default(autoincrement())
  userId          Int
  tableIdentifier String
  segmentId       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  segment         FilterSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tableIdentifier])
  @@index([userId])
  @@index([segmentId])
}

model BookingInternalNote {
  id           Int                 @id @default(autoincrement())
  notePresetId Int?
  text         String?
  bookingId    Int
  createdById  Int
  createdAt    DateTime            @default(now())
  booking      Booking             @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdBy    User                @relation(fields: [createdById], references: [id])
  notePreset   InternalNotePreset? @relation(fields: [notePresetId], references: [id], onDelete: Cascade)

  @@unique([bookingId, notePresetId])
  @@index([bookingId])
}

model WorkflowOptOutContact {
  id        Int                 @id @default(autoincrement())
  type      WorkflowContactType
  value     String
  optedOut  Boolean
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([type, value])
}

model Role {
  id          String           @id @default(cuid())
  name        String
  description String?
  teamId      Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  type        RoleType         @default(CUSTOM)
  color       String?
  memberships Membership[]
  team        Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  permissions RolePermission[]

  @@unique([name, teamId])
  @@index([teamId])
}

model RolePermission {
  id        String   @id @default(uuid())
  roleId    String
  resource  String
  action    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, resource, action])
  @@index([roleId])
  @@index([action])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model omDemoRequests {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source                String
  full_name             String
  work_email            String
  company_name          String?
  role                  String?
  team_size             String?
  calendar_system       String?
  calendar_system_other String?
  meeting_tools         String[]
  crm                   String?
  crm_other             String?
  scheduling_tool       String?
  scheduling_tool_other String?
  operational_challenge String?
  other_tools           String?
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
}

view RoutingFormResponse {
  id                               Int            @unique
  response                         Json
  responseLowercase                Json
  formId                           String
  formName                         String
  formTeamId                       Int?
  formUserId                       Int?
  bookingUid                       String?
  bookingStatus                    BookingStatus?
  bookingStatusOrder               Int?
  bookingCreatedAt                 DateTime?
  bookingStartTime                 DateTime?
  bookingEndTime                   DateTime?
  bookingAttendees                 Json?          @db.Json
  bookingUserId                    Int?
  bookingUserName                  String?
  bookingUserEmail                 String?
  bookingUserAvatarUrl             String?
  bookingAssignmentReason          String?
  bookingAssignmentReasonLowercase String?
  createdAt                        DateTime
  utm_source                       String?
  utm_medium                       String?
  utm_campaign                     String?
  utm_term                         String?
  utm_content                      String?
}

view BookingTimeStatus {
  id                    Int             @unique
  startTime             DateTime?
  endTime               DateTime?
  status                BookingStatus?
  userId                Int?
  eventTypeId           Int?
  bookingId             Int?
  userEmail             String?
  eventTypeName         String?
  teamId                Int?
  length                Decimal?        @db.Decimal
  bookingTitle          String?
  bookingDescription    String?
  bookingLocation       String?
  isPaid                Boolean?
  isRescheduled         Boolean?
  isRecorded            Boolean?
  bookingRating         Int?
  bookingRatingFeedback String?
  cancellationReason    String?
  rejectionReason       String?
  fromReschedule        String?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  recurringEventId      String?
  customInputs          Json?
  smsReminderNumber     String?
  destinationCalendarId Int?
  metadata              Json?
  responses             Json?
  iCalSequence          Int?
  iCalUID               String?
  userPrimaryEmail      String?
  idempotencyKey        String?
  noShowHost            Boolean?
  cancelledBy           String?
  rescheduledBy         String?
  oneTimePassword       String?
  reassignReason        String?
  reassignById          Int?
  creationSource        CreationSource?
  bookingUid            String?
  createdAt             DateTime?
  updatedAt             DateTime?
}

view BookingTimeStatusDenormalized {
  id                    Int             @id @unique
  startTime             DateTime
  endTime               DateTime
  status                BookingStatus
  userId                Int?
  eventTypeId           Int?
  bookingId             Int?
  userEmail             String?
  eventTypeName         String?
  teamId                Int?
  length                Decimal?        @db.Decimal
  bookingTitle          String?
  bookingDescription    String?
  bookingLocation       String?
  isPaid                Boolean?
  isRescheduled         Boolean?
  isRecorded            Boolean?
  bookingRating         Int?
  bookingRatingFeedback String?
  cancellationReason    String?
  rejectionReason       String?
  fromReschedule        String?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  recurringEventId      String?
  customInputs          Json?
  smsReminderNumber     String?
  destinationCalendarId Int?
  metadata              Json?
  responses             Json?
  iCalSequence          Int?
  iCalUID               String?
  userPrimaryEmail      String?
  idempotencyKey        String?
  noShowHost            Boolean?
  cancelledBy           String?
  rescheduledBy         String?
  oneTimePassword       String?
  reassignReason        String?
  reassignById          Int?
  creationSource        CreationSource?
  bookingUid            String?
  createdAt             DateTime
  updatedAt             DateTime?
}

enum SchedulingType {
  ROUND_ROBIN @map("roundRobin")
  COLLECTIVE  @map("collective")
  MANAGED     @map("managed")
}

enum PeriodType {
  UNLIMITED      @map("unlimited")
  ROLLING        @map("rolling")
  RANGE          @map("range")
  ROLLING_WINDOW @map("rolling_window")
}

enum CreationSource {
  API_V1 @map("api_v1")
  API_V2 @map("api_v2")
  WEBAPP @map("webapp")
}

enum IdentityProvider {
  CAL
  GOOGLE
  SAML
}

enum UserPermissionRole {
  USER
  ADMIN
}

enum CreditType {
  MONTHLY
  ADDITIONAL
}

enum MembershipRole {
  MEMBER
  OWNER
  ADMIN
}

enum BookingStatus {
  CANCELLED     @map("cancelled")
  ACCEPTED      @map("accepted")
  REJECTED      @map("rejected")
  PENDING       @map("pending")
  AWAITING_HOST @map("awaiting_host")
}

enum EventTypeCustomInputType {
  TEXT     @map("text")
  TEXTLONG @map("textLong")
  NUMBER   @map("number")
  BOOL     @map("bool")
  PHONE    @map("phone")
  RADIO    @map("radio")
}

enum ReminderType {
  PENDING_BOOKING_CONFIRMATION
}

enum PaymentOption {
  ON_BOOKING
  HOLD
}

enum WebhookTriggerEvents {
  BOOKING_CREATED
  BOOKING_RESCHEDULED
  BOOKING_CANCELLED
  FORM_SUBMITTED
  MEETING_ENDED
  RECORDING_READY
  BOOKING_PAID
  BOOKING_REQUESTED
  BOOKING_REJECTED
  BOOKING_PAYMENT_INITIATED
  MEETING_STARTED
  INSTANT_MEETING
  OOO_CREATED
  BOOKING_NO_SHOW_UPDATED
  RECORDING_TRANSCRIPTION_GENERATED
  AFTER_HOSTS_CAL_VIDEO_NO_SHOW
  AFTER_GUESTS_CAL_VIDEO_NO_SHOW
  FORM_SUBMITTED_NO_EVENT
}

enum AppCategories {
  calendar
  messaging
  other
  payment
  video
  web3
  automation
  analytics
  conferencing
  crm
}

enum WorkflowTriggerEvents {
  BEFORE_EVENT
  EVENT_CANCELLED
  NEW_EVENT
  RESCHEDULE_EVENT
  AFTER_EVENT
  AFTER_HOSTS_CAL_VIDEO_NO_SHOW
  AFTER_GUESTS_CAL_VIDEO_NO_SHOW
}

enum WorkflowActions {
  EMAIL_HOST
  EMAIL_ATTENDEE
  SMS_ATTENDEE
  SMS_NUMBER
  EMAIL_ADDRESS
  WHATSAPP_ATTENDEE
  WHATSAPP_NUMBER
}

enum TimeUnit {
  DAY    @map("day")
  HOUR   @map("hour")
  MINUTE @map("minute")
}

enum WorkflowTemplates {
  REMINDER
  CUSTOM
  CANCELLED
  RESCHEDULED
  COMPLETED
  RATING
}

enum WorkflowMethods {
  EMAIL
  SMS
  WHATSAPP
}

enum FeatureType {
  RELEASE
  EXPERIMENT
  OPERATIONAL
  KILL_SWITCH
  PERMISSION
}

enum RRResetInterval {
  MONTH
  DAY
}

enum RRTimestampBasis {
  CREATED_AT
  START_TIME
}

enum AccessScope {
  READ_BOOKING
  READ_PROFILE
}

enum RedirectType {
  UserEventType @map("user-event-type")
  TeamEventType @map("team-event-type")
  User          @map("user")
  Team          @map("team")
}

enum SMSLockState {
  LOCKED
  UNLOCKED
  REVIEW_NEEDED
}

enum AttributeType {
  TEXT
  NUMBER
  SINGLE_SELECT
  MULTI_SELECT
}

enum AssignmentReasonEnum {
  ROUTING_FORM_ROUTING
  ROUTING_FORM_ROUTING_FALLBACK
  REASSIGNED
  REROUTED
  SALESFORCE_ASSIGNMENT
  RR_REASSIGNED
}

enum EventTypeAutoTranslatedField {
  DESCRIPTION
  TITLE
}

enum WatchlistType {
  EMAIL
  DOMAIN
  USERNAME
}

enum WatchlistSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BillingPeriod {
  MONTHLY
  ANNUALLY
}

enum IncompleteBookingActionType {
  SALESFORCE
}

enum FilterSegmentScope {
  USER
  TEAM
}

enum WorkflowContactType {
  PHONE
  EMAIL
}

enum RoleType {
  SYSTEM
  CUSTOM
}
